{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar PropTypes = __importStar(require(\"prop-types\"));\n\nvar invoke_1 = __importDefault(require(\"lodash/invoke\"));\n\nvar CustomPropTypes_1 = __importDefault(require(\"../lib/CustomPropTypes\"));\n\nexports.BaseInputPropTypes = {\n  /** Currently selected value. */\n  value: PropTypes.string.isRequired,\n\n  /** Called on selected value change. */\n  onChange: PropTypes.func.isRequired,\n\n  /** If true, popup closes after selecting a value. */\n  closable: PropTypes.bool,\n\n  /** An input can be formatted to appear inline in other content. */\n  inline: PropTypes.bool,\n\n  /** Optional icon to display inside the Input. */\n  icon: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n\n  /** Icon position inside Input. Default: 'right'. */\n  iconPosition: PropTypes.oneOf(['right', 'left']),\n\n  /**\n   * Called on clear.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props and proposed value.\n   */\n  onClear: PropTypes.func,\n\n  /** Using the clearable setting will let users remove their selection from a calendar. */\n  clearable: PropTypes.bool,\n\n  /** Optional Icon to display inside the clearable Input. */\n  clearIcon: PropTypes.any,\n\n  /** Position for the popup. */\n  popupPosition: PropTypes.oneOf(['top left', 'top right', 'bottom left', 'bottom right', 'right center', 'left center', 'top center', 'bottom center']),\n\n  /** Should close when cursor leaves calendar popup. */\n  closeOnMouseLeave: PropTypes.bool,\n\n  /** The node where the picker should mount. */\n  mountNode: PropTypes.any,\n\n  /** A field can have its label next to instead of above it. */\n  inlineLabel: PropTypes.bool,\n\n  /** Picker width (any value that `style.width` can take). */\n  pickerWidth: PropTypes.string,\n\n  /** Style object for picker. */\n  pickerStyle: PropTypes.object,\n\n  /** Duration of the CSS transition animation in milliseconds. */\n  duration: PropTypes.number,\n\n  /** Named animation event to used. Must be defined in CSS. */\n  animation: PropTypes.string,\n\n  /** Moment date localization. */\n  localization: PropTypes.string,\n\n  /** Try to prevent mobile keyboard appearing. */\n  hideMobileKeyboard: PropTypes.bool\n};\nexports.MarkedValuesPropTypes = {\n  /** Array of marked dates. */\n  marked: PropTypes.oneOfType([PropTypes.arrayOf(CustomPropTypes_1.default.momentObj), PropTypes.arrayOf(CustomPropTypes_1.default.dateObject)]),\n\n  /** String specifying the mark color (Optional). */\n  markColor: PropTypes.string\n};\nexports.DateRelatedPropTypes = {\n  /** Moment date formatting string. */\n  dateFormat: PropTypes.string,\n\n  /** Date to display initially when no date is selected. */\n  initialDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.dateObject, CustomPropTypes_1.default.momentObj])\n};\nexports.TimeRelatedPropTypes = {\n  /** Time format. */\n  timeFormat: PropTypes.oneOf(['ampm', 'AMPM', '24']),\n\n  /** If true, minutes picker won't be shown after picking the hour. */\n  disableMinute: PropTypes.bool\n};\nexports.DisableValuesPropTypes = {\n  /** Date or list of dates that are displayed as disabled. */\n  disable: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), CustomPropTypes_1.default.momentObj, PropTypes.arrayOf(CustomPropTypes_1.default.momentObj), CustomPropTypes_1.default.dateObject, PropTypes.arrayOf(CustomPropTypes_1.default.dateObject)])\n};\nexports.EnableValuesPropTypes = {\n  /** Date or list of dates that are enabled (the rest are disabled). */\n  enable: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), CustomPropTypes_1.default.momentObj, PropTypes.arrayOf(CustomPropTypes_1.default.momentObj), CustomPropTypes_1.default.dateObject, PropTypes.arrayOf(CustomPropTypes_1.default.dateObject)])\n};\nexports.MinMaxValuePropTypes = {\n  /** Maximum date that can be selected. */\n  maxDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, CustomPropTypes_1.default.dateObject]),\n\n  /** Minimum date that can be selected. */\n  minDate: PropTypes.oneOfType([PropTypes.string, CustomPropTypes_1.default.momentObj, CustomPropTypes_1.default.dateObject])\n};\nexports.MultimodePropTypes = {\n  /** Preserve viewmode on focus? */\n  preserveViewMode: PropTypes.bool\n};\nexports.RangeRelatedPropTypes = {\n  /** Allow end date to be the same as start date. */\n  allowSameEndDate: PropTypes.bool\n};\n\nvar BaseInput =\n/** @class */\nfunction (_super) {\n  __extends(BaseInput, _super);\n\n  function BaseInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.closePopup = function () {\n      invoke_1.default(_this.props, 'onClose');\n      invoke_1.default(_this.props, 'onBlur');\n\n      _this.setState({\n        popupIsClosed: true\n      });\n    };\n\n    _this.openPopup = function () {\n      _this.setState({\n        popupIsClosed: false\n      });\n    };\n\n    _this.isPickerInFocus = function () {\n      return document.activeElement === _this.calendarNode;\n    };\n\n    _this.isTriggerInFocus = function () {\n      return document.activeElement === _this.inputNode;\n    };\n\n    _this.onModeSwitch = function () {\n      // when using keyboard for selecting values on inline calendar\n      // and when mode switches, picker looses focus.\n      // In order to preserve focus on active picker\n      // we call focus() on `calendarNode`.\n      // `calendarNode` goes from *View component via\n      // `this.onCalendarViewMount` callback\n      if (_this.props.inline && !_this.isPickerInFocus() && _this.calendarNode) {\n        _this.calendarNode.focus();\n      }\n    };\n\n    _this.onCalendarViewMount = function (calendarNode) {\n      _this.calendarNode = calendarNode;\n    };\n\n    _this.onInputViewMount = function (inputNode) {\n      _this.inputNode = inputNode;\n    };\n\n    return _this;\n  }\n\n  BaseInput.defaultProps = {\n    inline: false,\n    localization: moment_1.default.locale()\n  };\n  return BaseInput;\n}(React.Component);\n\nexports.default = BaseInput;","map":null,"metadata":{},"sourceType":"script"}