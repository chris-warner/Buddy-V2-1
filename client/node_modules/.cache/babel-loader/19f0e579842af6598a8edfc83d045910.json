{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar invoke_1 = __importDefault(require(\"lodash/invoke\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar InputView_1 = __importDefault(require(\"../views/InputView\"));\n\nvar parse_1 = require(\"./parse\");\n\nvar DatesRangePicker_1 = __importDefault(require(\"../pickers/dayPicker/DatesRangePicker\"));\n\nvar BaseInput_1 = __importStar(require(\"./BaseInput\"));\n\nvar DATES_SEPARATOR = ' - ';\n\nvar DatesRangeInput =\n/** @class */\nfunction (_super) {\n  __extends(DatesRangeInput, _super);\n\n  function DatesRangeInput(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.getPicker = function () {\n      var _a = _this.props,\n          value = _a.value,\n          dateFormat = _a.dateFormat,\n          markColor = _a.markColor,\n          marked = _a.marked,\n          initialDate = _a.initialDate,\n          localization = _a.localization,\n          minDate = _a.minDate,\n          maxDate = _a.maxDate,\n          tabIndex = _a.tabIndex,\n          pickerWidth = _a.pickerWidth,\n          pickerStyle = _a.pickerStyle,\n          allowSameEndDate = _a.allowSameEndDate;\n\n      var _b = parse_1.parseDatesRange(value, dateFormat),\n          start = _b.start,\n          end = _b.end;\n\n      var markedParsed = parse_1.parseArrayOrValue(marked, dateFormat, localization);\n      var minDateParsed = parse_1.parseValue(minDate, dateFormat, localization);\n      var maxDateParsed = parse_1.parseValue(maxDate, dateFormat, localization);\n      var initializeWith;\n\n      if (!initialDate && minDateParsed || maxDateParsed) {\n        initializeWith = minDateParsed || maxDateParsed;\n      } else {\n        initializeWith = parse_1.buildValue(start, initialDate, localization, dateFormat);\n      }\n\n      return React.createElement(DatesRangePicker_1.default, {\n        isPickerInFocus: _this.isPickerInFocus,\n        isTriggerInFocus: _this.isTriggerInFocus,\n        inline: _this.props.inline,\n        onCalendarViewMount: _this.onCalendarViewMount,\n        closePopup: _this.closePopup,\n        onChange: _this.handleSelect,\n        dateFormat: dateFormat,\n        initializeWith: initializeWith,\n        start: start,\n        end: end,\n        marked: markedParsed,\n        markColor: markColor,\n        minDate: parse_1.parseValue(minDate, dateFormat, localization),\n        maxDate: parse_1.parseValue(maxDate, dateFormat, localization),\n        localization: localization,\n        onHeaderClick: function onHeaderClick() {\n          return undefined;\n        },\n        tabIndex: tabIndex,\n        pickerWidth: pickerWidth,\n        pickerStyle: pickerStyle,\n        allowSameEndDate: allowSameEndDate\n      });\n    };\n\n    _this.handleSelect = function (e, _a) {\n      var value = _a.value;\n      var dateFormat = _this.props.dateFormat;\n      var start = value.start,\n          end = value.end;\n      var outputString = '';\n\n      if (start && end) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR + end.format(dateFormat);\n      } else if (start) {\n        outputString = \"\" + start.format(dateFormat) + DATES_SEPARATOR;\n      }\n\n      invoke_1.default(_this.props, 'onChange', e, __assign({}, _this.props, {\n        value: outputString\n      }));\n\n      if (_this.props.closable && start && end) {\n        _this.closePopup();\n      }\n    };\n\n    _this.state = {\n      popupIsClosed: true\n    };\n    return _this;\n  }\n\n  DatesRangeInput.prototype.render = function () {\n    var _a = this.props,\n        value = _a.value,\n        dateFormat = _a.dateFormat,\n        initialDate = _a.initialDate,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate,\n        closable = _a.closable,\n        marked = _a.marked,\n        markColor = _a.markColor,\n        localization = _a.localization,\n        allowSameEndDate = _a.allowSameEndDate,\n        rest = __rest(_a, [\"value\", \"dateFormat\", \"initialDate\", \"maxDate\", \"minDate\", \"closable\", \"marked\", \"markColor\", \"localization\", \"allowSameEndDate\"]);\n\n    return React.createElement(InputView_1.default, __assign({\n      popupIsClosed: this.state.popupIsClosed\n    }, rest, {\n      value: value,\n      onMount: this.onInputViewMount,\n      closePopup: this.closePopup,\n      openPopup: this.openPopup,\n      renderPicker: this.getPicker\n    }));\n  };\n  /**\n   * Component responsibility:\n   *  - parse input value (start: Moment, end: Moment)\n   *  - handle DayPicker change (format {start: Moment, end: Moment} into\n   *    string 'start - end')\n   */\n\n\n  DatesRangeInput.defaultProps = __assign({}, BaseInput_1.default.defaultProps, {\n    dateFormat: 'DD-MM-YYYY',\n    icon: 'calendar'\n  });\n  DatesRangeInput.propTypes = __assign({}, BaseInput_1.BaseInputPropTypes, BaseInput_1.DateRelatedPropTypes, BaseInput_1.MarkedValuesPropTypes, BaseInput_1.MinMaxValuePropTypes, BaseInput_1.RangeRelatedPropTypes);\n  return DatesRangeInput;\n}(BaseInput_1.default);\n\nexports.default = DatesRangeInput;","map":null,"metadata":{},"sourceType":"script"}