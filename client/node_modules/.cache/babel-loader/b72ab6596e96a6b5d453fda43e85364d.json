{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar filter_1 = __importDefault(require(\"lodash/filter\"));\n\nvar range_1 = __importDefault(require(\"lodash/range\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar isNil_1 = __importDefault(require(\"lodash/isNil\"));\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar MonthRangeView_1 = __importDefault(require(\"../../views/MonthRangeView\"));\n\nvar BasePicker_1 = require(\"../BasePicker\");\n\nvar const_1 = require(\"./const\");\n\nvar sharedFunctions_1 = require(\"./sharedFunctions\");\n\nvar MonthRangePicker =\n/** @class */\nfunction (_super) {\n  __extends(MonthRangePicker, _super);\n\n  function MonthRangePicker(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.handleChange = function (e, _a) {\n      var itemPosition = _a.itemPosition; // call `onChange` with value: { start: moment, end: moment }\n\n      var _b = _this.props,\n          start = _b.start,\n          end = _b.end,\n          localization = _b.localization;\n\n      var data = __assign({}, _this.props, {\n        value: {}\n      });\n\n      if (isNil_1.default(start) && isNil_1.default(end)) {\n        data.value = localization ? {\n          start: moment_1.default({\n            year: _this.state.date.year(),\n            month: itemPosition,\n            date: 1\n          }).locale(localization)\n        } : {\n          start: moment_1.default({\n            year: _this.state.date.year(),\n            month: itemPosition,\n            date: 1\n          })\n        };\n      } else if (!isNil_1.default(start) && isNil_1.default(end)) {\n        data.value = localization ? {\n          start: start,\n          end: moment_1.default({\n            year: _this.state.date.year(),\n            month: itemPosition,\n            date: 1\n          }).locale(localization).endOf('month')\n        } : {\n          start: start,\n          end: moment_1.default({\n            year: _this.state.date.year(),\n            month: itemPosition,\n            date: 1\n          }).endOf('month')\n        };\n      }\n\n      _this.props.onChange(e, data);\n    };\n\n    _this.switchToNextPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var nextDate = date.clone();\n        nextDate.add(1, 'year');\n        return {\n          date: nextDate\n        };\n      }, callback);\n    };\n\n    _this.switchToPrevPage = function (e, data, callback) {\n      _this.setState(function (_a) {\n        var date = _a.date;\n        var prevDate = date.clone();\n        prevDate.subtract(1, 'year');\n        return {\n          date: prevDate\n        };\n      }, callback);\n    };\n\n    _this.getInitialDatePosition = function () {\n      var selectable = _this.getSelectableCellPositions();\n\n      return sharedFunctions_1.getInitialDatePosition(selectable, _this.state.date);\n    };\n\n    _this.PAGE_WIDTH = const_1.MONTH_PAGE_WIDTH;\n    return _this;\n  }\n\n  MonthRangePicker.prototype.render = function () {\n    var _a = this.props,\n        onChange = _a.onChange,\n        initializeWith = _a.initializeWith,\n        closePopup = _a.closePopup,\n        inline = _a.inline,\n        isPickerInFocus = _a.isPickerInFocus,\n        isTriggerInFocus = _a.isTriggerInFocus,\n        onCalendarViewMount = _a.onCalendarViewMount,\n        dateFormat = _a.dateFormat,\n        start = _a.start,\n        end = _a.end,\n        minDate = _a.minDate,\n        maxDate = _a.maxDate,\n        localization = _a.localization,\n        rest = __rest(_a, [\"onChange\", \"initializeWith\", \"closePopup\", \"inline\", \"isPickerInFocus\", \"isTriggerInFocus\", \"onCalendarViewMount\", \"dateFormat\", \"start\", \"end\", \"minDate\", \"maxDate\", \"localization\"]);\n\n    return React.createElement(MonthRangeView_1.default, __assign({}, rest, {\n      values: this.buildCalendarValues(),\n      onNextPageBtnClick: this.switchToNextPage,\n      onPrevPageBtnClick: this.switchToPrevPage,\n      onCellHover: this.onHoveredCellPositionChange,\n      hoveredItemIndex: this.state.hoveredCellPosition,\n      onValueClick: this.handleChange,\n      inline: this.props.inline,\n      hasPrevPage: this.isPrevPageAvailable(),\n      hasNextPage: this.isNextPageAvailable(),\n      onBlur: this.handleBlur,\n      onMount: this.props.onCalendarViewMount,\n      currentHeadingValue: this.getCurrentDate(),\n      currentRangeHeadingValue: this.getSelectedRange(),\n      activeRange: this.getActiveCellsPositions(),\n      disabledItemIndexes: this.getDisabledPositions(),\n      localization: localization\n    }));\n  };\n\n  MonthRangePicker.prototype.getCurrentDate = function () {\n    /* Return currently selected year and month(string) to display in calendar header. */\n    return this.state.date.format('YYYY');\n  };\n\n  MonthRangePicker.prototype.buildCalendarValues = function () {\n    var localization = this.props.localization;\n    return sharedFunctions_1.buildCalendarValues(localization);\n  };\n\n  MonthRangePicker.prototype.getSelectableCellPositions = function () {\n    var _this = this;\n\n    return filter_1.default(range_1.default(0, const_1.MONTHS_IN_YEAR), function (d) {\n      return !includes_1.default(_this.getDisabledPositions(), d);\n    });\n  };\n\n  MonthRangePicker.prototype.getActiveCellsPositions = function () {\n    /*\n      Return starting and ending positions of month range that should be displayed as active\n      { start: number, end: number }\n    */\n    var _a = this.props,\n        start = _a.start,\n        end = _a.end;\n    var currentYear = this.state.date.year();\n    var result = {\n      start: undefined,\n      end: undefined\n    };\n\n    if (start && end) {\n      if (currentYear < start.year() || currentYear > end.year()) {\n        return result;\n      }\n\n      result.start = currentYear === start.year() ? start.month() : 0;\n      result.end = currentYear === end.year() ? end.month() : const_1.MONTHS_IN_YEAR - 1;\n    }\n\n    if (start && !end) {\n      result.start = currentYear === start.year() ? start.month() : undefined;\n    }\n\n    return result;\n  };\n\n  MonthRangePicker.prototype.getDisabledPositions = function () {\n    /*\n      Return position numbers of dates that should be displayed as disabled\n      (position in array returned by `this.buildCalendarValues`).\n    */\n    var _a = this.props,\n        maxDate = _a.maxDate,\n        minDate = _a.minDate;\n    return sharedFunctions_1.getDisabledPositions(undefined, undefined, maxDate, minDate, this.state.date);\n  };\n\n  MonthRangePicker.prototype.isNextPageAvailable = function () {\n    var maxDate = this.props.maxDate;\n    return sharedFunctions_1.isNextPageAvailable(maxDate, undefined, this.state.date);\n  };\n\n  MonthRangePicker.prototype.isPrevPageAvailable = function () {\n    var minDate = this.props.minDate;\n    return sharedFunctions_1.isPrevPageAvailable(minDate, undefined, this.state.date);\n  };\n\n  MonthRangePicker.prototype.getSelectedRange = function () {\n    /* Return currently selected dates range(string) to display in calendar header. */\n    var _a = this.props,\n        start = _a.start,\n        end = _a.end,\n        dateFormat = _a.dateFormat;\n    return (start ? start.format(dateFormat) : '- - -') + \" - \" + (end ? end.format(dateFormat) : '- - -');\n  };\n\n  return MonthRangePicker;\n}(BasePicker_1.RangeSelectionPicker);\n\nexports.default = MonthRangePicker;","map":null,"metadata":{},"sourceType":"script"}