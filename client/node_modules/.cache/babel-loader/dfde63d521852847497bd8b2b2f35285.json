{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isNil_1 = __importDefault(require(\"lodash/isNil\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar React = __importStar(require(\"react\"));\n\nvar semantic_ui_react_1 = require(\"semantic-ui-react\");\n\nvar Cell_1 = __importDefault(require(\"./Cell\"));\n\nvar Cell_2 = require(\"./Cell\");\n\nfunction Body(props) {\n  var data = props.data,\n      width = props.width,\n      onCellClick = props.onCellClick,\n      active = props.active,\n      disabled = props.disabled,\n      hovered = props.hovered,\n      onCellHover = props.onCellHover,\n      marked = props.marked,\n      markColor = props.markColor;\n  var content = buildRows(data, width).map(function (row, rowIndex) {\n    return React.createElement(semantic_ui_react_1.Table.Row, {\n      key: \"\" + rowIndex + row[0]\n    }, row.map(function (item, itemIndex) {\n      return React.createElement(Cell_1.default, {\n        style: getCellStyle(width),\n        active: isActive(rowIndex, width, itemIndex, active),\n        hovered: isHovered(rowIndex, width, itemIndex, hovered),\n        disabled: isDisabled(rowIndex, width, itemIndex, disabled),\n        marked: isMarked(rowIndex, width, itemIndex, marked),\n        markColor: markColor,\n        key: \"\" + (rowIndex * width + itemIndex),\n        itemPosition: rowIndex * width + itemIndex,\n        content: item,\n        onHover: onCellHover,\n        onClick: onCellClick\n      });\n    }));\n  });\n  return React.createElement(semantic_ui_react_1.Table.Body, null, content);\n}\n\nfunction buildRows(data, width) {\n  var height = data.length / width;\n  var rows = [];\n\n  for (var i = 0; i < height; i++) {\n    rows.push(data.slice(i * width, i * width + width));\n  }\n\n  return rows;\n}\n\nfunction isActive(rowIndex, rowWidth, colIndex, active) {\n  if (isNil_1.default(active)) {\n    return false;\n  }\n\n  if (isArray_1.default(active)) {\n    for (var _i = 0, _a = active; _i < _a.length; _i++) {\n      var activeIndex = _a[_i];\n\n      if (rowIndex * rowWidth + colIndex === activeIndex) {\n        return true;\n      }\n    }\n  }\n\n  return rowIndex * rowWidth + colIndex === active;\n}\n\nfunction isHovered(rowIndex, rowWidth, colIndex, hovered) {\n  if (isNil_1.default(hovered)) {\n    return false;\n  }\n\n  return rowIndex * rowWidth + colIndex === hovered;\n}\n\nfunction isDisabled(rowIndex, rowWidth, colIndex, disabledIndexes) {\n  if (isNil_1.default(disabledIndexes) || disabledIndexes.length === 0) {\n    return false;\n  }\n\n  for (var _i = 0, disabledIndexes_1 = disabledIndexes; _i < disabledIndexes_1.length; _i++) {\n    var disabledIndex = disabledIndexes_1[_i];\n\n    if (rowIndex * rowWidth + colIndex === disabledIndex) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getCellStyle(width) {\n  switch (width) {\n    case 3:\n      return Cell_2.cellStyleWidth3;\n\n    case 4:\n      return Cell_2.cellStyleWidth4;\n\n    case 7:\n      return Cell_2.cellStyleWidth7;\n\n    default:\n      break;\n  }\n}\n\nfunction isMarked(rowIndex, rowWidth, colIndex, markedIndexes) {\n  if (isNil_1.default(markedIndexes) || markedIndexes.length === 0) {\n    return false;\n  }\n\n  for (var _i = 0, markedIndexes_1 = markedIndexes; _i < markedIndexes_1.length; _i++) {\n    var markedIndex = markedIndexes_1[_i];\n\n    if (rowIndex * rowWidth + colIndex === markedIndex) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.default = Body;","map":null,"metadata":{},"sourceType":"script"}