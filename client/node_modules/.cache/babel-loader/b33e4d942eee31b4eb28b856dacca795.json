{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isNil_1 = __importDefault(require(\"lodash/isNil\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar isString_1 = __importDefault(require(\"lodash/isString\"));\n\nvar compact_1 = __importDefault(require(\"lodash/compact\"));\n\nvar moment_1 = __importDefault(require(\"moment\"));\n\nexports.TIME_FORMAT = {\n  24: 'HH:mm',\n  AMPM: 'hh:mm A',\n  ampm: 'hh:mm a'\n};\n/** Parse string, moment, Date.\n *\n * Return unedfined on invalid input.\n */\n\nfunction parseValue(value, dateFormat, localization) {\n  if (!isNil_1.default(value) && !isNil_1.default(dateFormat)) {\n    var date = moment_1.default(value, dateFormat);\n\n    if (date.isValid()) {\n      date.locale(localization);\n      return date;\n    }\n  }\n}\n\nexports.parseValue = parseValue;\n/** Parse string, moment, Date, string[], moment[], Date[].\n *\n * Return array of moments. Returned value contains only valid moments.\n * Return undefined if none of the input values are valid.\n */\n\nfunction parseArrayOrValue(data, dateFormat, localization) {\n  if (isArray_1.default(data)) {\n    var parsed = compact_1.default(data.map(function (item) {\n      return parseValue(item, dateFormat, localization);\n    }));\n\n    if (parsed.length > 0) {\n      return parsed;\n    }\n  }\n\n  var parsedValue = parseValue(data, dateFormat, localization);\n  return parsedValue && [parsedValue];\n}\n\nexports.parseArrayOrValue = parseArrayOrValue;\n/** Create moment.\n *\n * Creates moment using `dateParams` or `initialDate` arguments (if provided).\n * Precedense order: dateParams -> initialDate -> default value\n */\n\nfunction getInitializer(context) {\n  var dateParams = context.dateParams,\n      initialDate = context.initialDate,\n      dateFormat = context.dateFormat,\n      localization = context.localization;\n\n  if (dateParams) {\n    var parsedParams = localization ? moment_1.default(dateParams).locale(localization) : moment_1.default(dateParams);\n\n    if (parsedParams.isValid()) {\n      return parsedParams;\n    }\n  }\n\n  var parsedInitialDate = parseValue(initialDate, dateFormat, localization);\n\n  if (parsedInitialDate) {\n    return parsedInitialDate;\n  }\n\n  return localization ? moment_1.default().locale(localization) : moment_1.default();\n}\n\nexports.getInitializer = getInitializer;\n/** Creates moment instance from provided value or initialDate.\n *  Creates today by default.\n */\n\nfunction buildValue(value, initialDate, localization, dateFormat, defaultVal) {\n  if (defaultVal === void 0) {\n    defaultVal = moment_1.default();\n  }\n\n  var valueParsed = parseValue(value, dateFormat, localization);\n\n  if (valueParsed) {\n    return valueParsed;\n  }\n\n  var initialDateParsed = parseValue(initialDate, dateFormat, localization);\n\n  if (initialDateParsed) {\n    return initialDateParsed;\n  }\n\n  var _defaultVal = defaultVal ? defaultVal.clone() : defaultVal;\n\n  if (_defaultVal) {\n    _defaultVal.locale(localization);\n  }\n\n  return _defaultVal;\n}\n\nexports.buildValue = buildValue;\n\nfunction dateValueToString(value, dateFormat, locale) {\n  if (isString_1.default(value)) {\n    return value;\n  }\n\n  if (moment_1.default.isMoment(value)) {\n    var _value = value.clone();\n\n    _value.locale(locale);\n\n    return _value.format(dateFormat);\n  }\n\n  var date = moment_1.default(value, dateFormat);\n\n  if (date.isValid()) {\n    date.locale(locale);\n    return date.format(dateFormat);\n  }\n\n  return '';\n}\n\nexports.dateValueToString = dateValueToString;\n\nfunction cleanDate(inputString, dateFormat) {\n  var formattedDateLength = moment_1.default().format(dateFormat).length;\n  return inputString.trim().slice(0, formattedDateLength);\n}\n/**\n * Extract start and end dates from input string.\n * Return { start: Moment|undefined, end: Moment|undefined }\n * @param {string} inputString Row input string from user\n * @param {string} dateFormat Moment formatting string\n * @param {string} inputSeparator Separator for split inputString\n */\n\n\nfunction parseDatesRange(inputString, dateFormat, inputSeparator) {\n  if (inputString === void 0) {\n    inputString = '';\n  }\n\n  if (dateFormat === void 0) {\n    dateFormat = '';\n  }\n\n  if (inputSeparator === void 0) {\n    inputSeparator = ' - ';\n  }\n\n  var dates = inputString.split(inputSeparator).map(function (date) {\n    return cleanDate(date, dateFormat);\n  });\n  var result = {};\n  var start;\n  var end;\n  start = moment_1.default(dates[0], dateFormat);\n\n  if (dates.length === 2) {\n    end = moment_1.default(dates[1], dateFormat);\n  }\n\n  if (start && start.isValid()) {\n    result.start = start;\n  }\n\n  if (end && end.isValid()) {\n    result.end = end;\n  }\n\n  return result;\n}\n\nexports.parseDatesRange = parseDatesRange;","map":null,"metadata":{},"sourceType":"script"}